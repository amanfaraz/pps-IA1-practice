 gcc -g p5original.c 
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) b main
Breakpoint 1 at 0x845: file p5original.c, line 33.
(gdb) r
Starting program: /home/runner/pps-IA1-practice/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p5original.c:33
33    n=input();
(gdb) s
input () at p5original.c:3
3   {
(gdb) n
5     printf("Enter a number: ");
(gdb) n
6     scanf("%f",&a);
(gdb) n
Enter a number: 100
7     return a;
(gdb) p a
$1 = 100
(gdb) n
8   }
(gdb) n
main () at p5original.c:34
34    result=my_sqrt(n);
(gdb) s
my_sqrt (n=100) at p5original.c:11
11    double start=0,end=n,mid;
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
19      if (mid*mid>=n)
(gdb) n
21        end=mid;
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
19      if (mid*mid>=n)
(gdb) n
21        end=mid;
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
19      if (mid*mid>=n)
(gdb) n
21        end=mid;
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
17        start=mid;
(gdb) n
19      if (mid*mid>=n)
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
17        start=mid;
(gdb) n
19      if (mid*mid>=n)
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
19      if (mid*mid>=n)
(gdb) n
21        end=mid;
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
19      if (mid*mid>=n)
(gdb) n
21        end=mid;
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
17        start=mid;
(gdb) n
19      if (mid*mid>=n)
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
17        start=mid;
(gdb) n
19      if (mid*mid>=n)
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
19      if (mid*mid>=n)
(gdb) n
21        end=mid;
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
19      if (mid*mid>=n)
(gdb) n
21        end=mid;
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
17        start=mid;
(gdb) n
19      if (mid*mid>=n)
(gdb) n
12    while(end-start>0.000001)
(gdb) n
14      mid=(start+end)/2;
(gdb) n
15      if (mid*mid<n)
(gdb) n
17        start=mid;
(gdb) n
19      if (mid*mid>=n)
(gdb) finish
Run till exit from #0  my_sqrt (n=100) at p5original.c:19
0x000055da5b200866 in main () at p5original.c:34
34    result=my_sqrt(n);
Value returned is $2 = 10
(gdb) n
35    output(n,result);
(gdb) s
output (n=100, result=10) at p5original.c:28
28      printf("The squareroot of %f is %0.3f \n",n,result);
(gdb) n
The squareroot of 100.000000 is 10.000 
29    }
(gdb) c
Continuing.
[Inferior 1 (process 1984) exited normally]
(gdb) 